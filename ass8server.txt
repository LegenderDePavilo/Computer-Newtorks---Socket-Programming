#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <time.h>
struct customer {
char operation[40];
char    cli_addr[16];
int  cli_port;
char time[80];
struct customer *next;
};
struct customer *Create_Customer(){
struct customer *x =(struct customer *)malloc(sizeof(struct customer));
x->next=NULL;
return x;
}
int main(){
time_t     now;
struct tm *ts;
char buf[80];
int listenfd = 0,connfd = 0,n=0,num=0;
struct sockaddr_in serv_addr;
struct sockaddr_in client_addr;
char sendBuff[1025];
char recvBuff[1024];
int numrv;
char new1[50],num2[10],num3[10];
int newn,t,h,j,i,n1,n2;
listenfd = socket(AF_INET, SOCK_STREAM, 0);
printf("socket retrieve success\n");
memset(&serv_addr, '0', sizeof(serv_addr));
 memset(sendBuff, '0', sizeof(sendBuff));
serv_addr.sin_family = AF_INET;
serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
serv_addr.sin_port = htons(5000);
bind(listenfd, (struct sockaddr*)&serv_addr,sizeof(serv_addr));
if(listen(listenfd, 10) == -1){
printf("Failed to listen\n");
return -1;
}
printf("\nAvailable operations : ");
printf("\nAddition(+)");
printf("\nSubstraction(-)");
printf("\nMultiplication(*)");
printf("\nDivision(/)");
struct customer **Customers,*head,*temp;
Customers = &head;
int customer_count = 0;
while(1){
socklen_t addr_size = sizeof(client_addr);
connfd = accept(listenfd, (struct sockaddr*)&client_addr, &addr_size);
struct sockaddr_in* pV4Addr = (struct sockaddr_in*)&client_addr;
struct in_addr ipAddr = pV4Addr->sin_addr;
char str[INET_ADDRSTRLEN];
inet_ntop( AF_INET, &ipAddr, str, INET_ADDRSTRLEN );
sprintf(sendBuff,"Number of Unique Customers so far: %d",customer_count);
if ((send(connfd,sendBuff,strlen(sendBuff),0))== -1){
fprintf(stderr, "Failure Sending Message\n");
close(connfd);
break;
}
num = recv(connfd, recvBuff, sizeof(recvBuff),0);now = time(NULL);//time-stamping
ts = localtime(&now);
strftime(buf, sizeof(buf), "%a %Y-%m-%d %H:%M:%S %Z", ts);
if ( num <= 0 ){
printf("Either Connection Closed or Error\n");
}
recvBuff[num] = '\0';
i=0;
if(!(recvBuff[i]=='+'||recvBuff[i]=='-'||recvBuff[i]=='*'||recvBuff[i]=='/'))
{
printf("\nWrong input");
return 0;
}
i=1;
j=0;
while(recvBuff[i]!=' ')
num2[j++]=recvBuff[i++];
num2[j]='\0';
j=0;
while(recvBuff[i]!='\0')
num3[j++]=recvBuff[i++];
num3[j]='\0';
printf("\n Num1, Num2  :%s, %s",num2,num3);
n1=atoi(num2);
n2=atoi(num3);
if(recvBuff[0]=='+'){
 t=n1+n2;
*Customers = Create_Customer();
strcpy((*Customers)->operation,"Addition");
strcpy((*Customers)->cli_addr,str);
(*Customers)->cli_port = client_addr.sin_port;
strcpy((*Customers)->time,buf);
Customers=&((*Customers)->next);
customer_count++;
sprintf(sendBuff,"The result is : %d",t);
}
if(recvBuff[0]=='-')
{
t=n1-n2;
*Customers = Create_Customer();
strcpy((*Customers)->operation,"Substraction");
strcpy((*Customers)->cli_addr,str);
 (*Customers)->cli_port = client_addr.sin_port;
 strcpy((*Customers)->time,buf);
Customers=&((*Customers)->next);
customer_count++;
sprintf(sendBuff,"The result is : %d",t);
}
if(recvBuff[0]=='*'){
t=n1*n2;
*Customers = Create_Customer();
strcpy((*Customers)->operation,"Multiplication");
strcpy((*Customers)->cli_addr,str);
(*Customers)->cli_port = client_addr.sin_port;
strcpy((*Customers)->time,buf);
Customers=&((*Customers)->next);
customer_count++;
sprintf(sendBuff,"The result is : %d",t);
}
if(recvBuff[0]=='/'){
t=n1/n2;
*Customers = Create_Customer();
strcpy((*Customers)->operation,"Division");
strcpy((*Customers)->cli_addr,str);
(*Customers)->cli_port = client_addr.sin_port;
strcpy((*Customers)->time,buf);
Customers=&((*Customers)->next);
customer_count++;
sprintf(sendBuff,"The result is : %d",t);
}
h=t;
struct customer *t;
t=head;
int x=0;
while(t){
x++;
printf("\n===============%d===========",x);
printf("\nCustomer IP: %s",t->cli_addr);
printf("\nCustomer port: %d",t->cli_port);
printf("\nOperation done: %s",t->operation);
printf("\nResult: %d",h);
printf("\nTime-Stamp: %s",t->time);
printf("\n\n");
t=t->next;
}
if ((send(connfd,sendBuff,strlen(sendBuff),0))== -1){
fprintf(stderr, "Failure Sending Message\n");
close(connfd);
break;
}
close(connfd);
sleep(1);
}
return 0;
}
